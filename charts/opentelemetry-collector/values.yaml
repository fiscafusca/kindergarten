collector:  
  image:
    tag: "0.66.0"
  mode: daemonset
  presets:
    logsCollection:
      enabled: true
      includeCollectorLogs: false
  
  config:
    receivers:
      # otlp:
      #   protocols:
      #     http: {}
      #     grpc: {}
      # fluentforward:
      #   endpoint: logging-logging-operator-fluentd.logging.svc.cluster.local:24240
      filelog:
        include: [/var/log/pods/**/*.log]
        operators:
          - id: get-format
            routes:
            - expr: body matches "^\\{"
              output: parser-docker
            - expr: body matches "^[^ Z]+ "
              output: parser-crio
            - expr: body matches "^[^ Z]+Z"
              output: parser-containerd
            type: router
          - id: parser-crio
            output: extract_metadata_from_filepath
            regex: ^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
            timestamp:
              layout: "2006-01-02T15:04:05.000000000-07:00"
              layout_type: gotime
              parse_from: attributes.time
            type: regex_parser
          - id: parser-containerd
            output: extract_metadata_from_filepath
            regex: ^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*) ?(?P<log>.*)$
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: attributes.time
            type: regex_parser
          - id: parser-docker
            output: extract_metadata_from_filepath
            timestamp:
              layout: '%Y-%m-%dT%H:%M:%S.%LZ'
              parse_from: attributes.time
            type: json_parser
          - id: extract_metadata_from_filepath
            parse_from: attributes["log.file.path"]
            regex: ^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<restart_count>\d+)\.log$
            type: regex_parser
          - from: attributes.stream
            to: attributes["log.iostream"]
            type: move
          - from: attributes.container_name
            to: attributes["k8s.container.name"]
            type: copy
          - from: attributes.container_name
            to: resource["k8s.container.name"]
            type: move
          - from: attributes.namespace
            to: attributes["k8s.namespace.name"]
            type: copy
          - from: attributes.namespace
            to: resource["k8s.namespace.name"]
            type: move
          - from: attributes.pod_name
            to: attributes["k8s.pod.name"]
            type: copy
          - from: attributes.pod_name
            to: resource["k8s.pod.name"]
            type: move
          - from: attributes.restart_count
            to: attributes["k8s.container.restart_count"]
            type: copy
          - from: attributes.restart_count
            to: resource["k8s.container.restart_count"]
            type: move
          - from: attributes.uid
            to: attributes["k8s.pod.uid"]
            type: copy
          - from: attributes.uid
            to: resource["k8s.pod.uid"]
            type: move
          - from: attributes.log
            to: body
            type: move
          - id: get-body-format
            routes:
            - expr: body matches "^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}" # check if the first element of the body is an IP address (nginx logs)
              output: parser-nginx
            type: router
          - id: parser-nginx
            type: regex_parser
            regex: "^(?P<remoteAddress>[^ ]*) (?P<remoteHostname>[^ ]*) (?P<user>[^ ]*) \\[(?P<time>[^\\]]*)\\] \"(?P<requestMethod>\\S+)(?: +(?P<requestURL>[^\"]*?)(?: +\\S*)?)?\" (?P<statusCode>[^ ]*) (?P<responseSize>[^ ]*)(?: \"(?P<HTTPReferer>[^\"]*)\" \"(?P<userAgent>[^\"]*)\"(?:\\s+(?P<http_x_forwarded_for>[^ ]+))?)?$"
            timestamp:
              parse_from: body.time
              layout: "%d/%b/%Y:%H:%M:%S %z"

    exporters:
      logging:
        logLevel: warn
      loki:
        endpoint: http://loki-gateway.loki/loki/api/v1/push
        tls:
          insecure: true
        headers:
          "X-Scope-OrgID": "kindred"
        # labels:
        #   attributes:
        #     k8s.container.name: "container_name"
    processors:
      k8sattributes:
        passthrough: false
        auth_type: "kubeConfig"
        extract:
          metadata:
          - k8s.pod.name
          - k8s.pod.uid
          - k8s.deployment.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
          annotations:
          - tag_name: pod_annotation
            key: some-annotation
            from: pod
          labels:
          - tag_name: f4
            key: f4
            from: pod
          - tag_name: namespace_label
            key: some-namespace-label
            from: namespace
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
        - sources:
          - from: resource_attribute
            name: k8s.namespace.name
      attributes:
        actions:
        - action: insert
          key: container_name
          from_attribute: k8s.container.name
        - action: insert
          key: pod_name
          from_attribute: k8s.pod.name
        - action: insert
          key: namespace
          from_attribute: k8s.namespace.name
        - action: insert
          key: loki.attribute.labels
          value: container_name, pod_name, namespace, remoteAddress
        - action: insert
          key: loki.resource.labels
          value: namespace_label, pod_annotation, f4
      batch: {}        
            
    extensions: {}

    service:
      pipelines:
        logs:
          receivers: [filelog]
          processors: [k8sattributes, attributes]
          exporters: [loki]